// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager[T interface{}] struct {
	mock.Mock
}

type Manager_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *Manager[T]) EXPECT() *Manager_Expecter[T] {
	return &Manager_Expecter[T]{mock: &_m.Mock}
}

// ExecuteTx provides a mock function with given fields: ctx, fn
func (_m *Manager[T]) ExecuteTx(ctx context.Context, fn func(T) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(T) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_ExecuteTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTx'
type Manager_ExecuteTx_Call[T interface{}] struct {
	*mock.Call
}

// ExecuteTx is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(T) error
func (_e *Manager_Expecter[T]) ExecuteTx(ctx interface{}, fn interface{}) *Manager_ExecuteTx_Call[T] {
	return &Manager_ExecuteTx_Call[T]{Call: _e.mock.On("ExecuteTx", ctx, fn)}
}

func (_c *Manager_ExecuteTx_Call[T]) Run(run func(ctx context.Context, fn func(T) error)) *Manager_ExecuteTx_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(T) error))
	})
	return _c
}

func (_c *Manager_ExecuteTx_Call[T]) Return(_a0 error) *Manager_ExecuteTx_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_ExecuteTx_Call[T]) RunAndReturn(run func(context.Context, func(T) error) error) *Manager_ExecuteTx_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager[T] {
	mock := &Manager[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
